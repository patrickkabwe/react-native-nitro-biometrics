///
/// HybridNitroBiometricsSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNitroBiometricsSpec.hpp"

// Forward declaration of `HybridNitroBiometricsSpec_cxx` to properly resolve imports.
namespace NitroBiometrics { class HybridNitroBiometricsSpec_cxx; }

// Forward declaration of `NitroBiometricsOptions` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { struct NitroBiometricsOptions; }
// Forward declaration of `NitroBiometryType` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { enum class NitroBiometryType; }

#include <NitroModules/Promise.hpp>
#include "NitroBiometricsOptions.hpp"
#include <string>
#include "NitroBiometryType.hpp"

#include "NitroBiometrics-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitrobiometrics {

  /**
   * The C++ part of HybridNitroBiometricsSpec_cxx.swift.
   *
   * HybridNitroBiometricsSpecSwift (C++) accesses HybridNitroBiometricsSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNitroBiometricsSpec_cxx can directly inherit from the C++ class HybridNitroBiometricsSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNitroBiometricsSpecSwift: public virtual HybridNitroBiometricsSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNitroBiometricsSpecSwift(const NitroBiometrics::HybridNitroBiometricsSpec_cxx& swiftPart):
      HybridObject(HybridNitroBiometricsSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroBiometrics::HybridNitroBiometricsSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<bool>> authenticate(const NitroBiometricsOptions& options) override {
      auto __result = _swiftPart.authenticate(options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isAvailable() override {
      auto __result = _swiftPart.isAvailable();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<NitroBiometryType>> getAvailableBiometryType() override {
      auto __result = _swiftPart.getAvailableBiometryType();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroBiometrics::HybridNitroBiometricsSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitrobiometrics
