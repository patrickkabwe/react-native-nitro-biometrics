///
/// HybridNitroBiometricsSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNitroBiometricsSpec``
public protocol HybridNitroBiometricsSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func authenticate(options: NitroBiometricsOptions) throws -> Promise<Bool>
  func isAvailable() throws -> Promise<Bool>
  func getAvailableBiometryType() throws -> Promise<NitroBiometryType>
}

/// See ``HybridNitroBiometricsSpec``
public class HybridNitroBiometricsSpec_base {
  private weak var cxxWrapper: HybridNitroBiometricsSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNitroBiometricsSpec_cxx {
  #if DEBUG
    guard self is HybridNitroBiometricsSpec else {
      fatalError("`self` is not a `HybridNitroBiometricsSpec`! Did you accidentally inherit from `HybridNitroBiometricsSpec_base` instead of `HybridNitroBiometricsSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNitroBiometricsSpec_cxx(self as! HybridNitroBiometricsSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NitroBiometrics HybridObject.
 * Implement this protocol to create Swift-based instances of NitroBiometrics.
 * ```swift
 * class HybridNitroBiometrics : HybridNitroBiometricsSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNitroBiometricsSpec = HybridNitroBiometricsSpec_protocol & HybridNitroBiometricsSpec_base
