///
/// NitroBiometrics-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `HybridNitroBiometricsSpec` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { class HybridNitroBiometricsSpec; }
// Forward declaration of `NitroBiometryType` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { enum class NitroBiometryType; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridNitroBiometricsSpec_cxx` to properly resolve imports.
namespace NitroBiometrics { class HybridNitroBiometricsSpec_cxx; }

// Include C++ defined types
#include "HybridNitroBiometricsSpec.hpp"
#include "NitroBiometryType.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::nitrobiometrics::bridge::swift {

  // pragma MARK: std::shared_ptr<Promise<bool>>
  /**
   * Specialized version of `std::shared_ptr<Promise<bool>>`.
   */
  using std__shared_ptr_Promise_bool__ = std::shared_ptr<Promise<bool>>;
  inline std::shared_ptr<Promise<bool>> create_std__shared_ptr_Promise_bool__() {
    return Promise<bool>::create();
  }
  inline PromiseHolder<bool> wrap_std__shared_ptr_Promise_bool__(std::shared_ptr<Promise<bool>> promise) {
    return PromiseHolder<bool>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(bool /* result */)>
  /**
   * Specialized version of `std::function<void(bool)>`.
   */
  using Func_void_bool = std::function<void(bool /* result */)>;
  /**
   * Wrapper class for a `std::function<void(bool / * result * /)>`, this can be used from Swift.
   */
  class Func_void_bool_Wrapper final {
  public:
    explicit Func_void_bool_Wrapper(std::function<void(bool /* result */)>&& func): _function(std::make_shared<std::function<void(bool /* result */)>>(std::move(func))) {}
    inline void call(bool result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(bool /* result */)>> _function;
  };
  Func_void_bool create_Func_void_bool(void* _Nonnull swiftClosureWrapper);
  inline Func_void_bool_Wrapper wrap_Func_void_bool(Func_void_bool value) {
    return Func_void_bool_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<NitroBiometryType>>
  /**
   * Specialized version of `std::shared_ptr<Promise<NitroBiometryType>>`.
   */
  using std__shared_ptr_Promise_NitroBiometryType__ = std::shared_ptr<Promise<NitroBiometryType>>;
  inline std::shared_ptr<Promise<NitroBiometryType>> create_std__shared_ptr_Promise_NitroBiometryType__() {
    return Promise<NitroBiometryType>::create();
  }
  inline PromiseHolder<NitroBiometryType> wrap_std__shared_ptr_Promise_NitroBiometryType__(std::shared_ptr<Promise<NitroBiometryType>> promise) {
    return PromiseHolder<NitroBiometryType>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(NitroBiometryType /* result */)>
  /**
   * Specialized version of `std::function<void(NitroBiometryType)>`.
   */
  using Func_void_NitroBiometryType = std::function<void(NitroBiometryType /* result */)>;
  /**
   * Wrapper class for a `std::function<void(NitroBiometryType / * result * /)>`, this can be used from Swift.
   */
  class Func_void_NitroBiometryType_Wrapper final {
  public:
    explicit Func_void_NitroBiometryType_Wrapper(std::function<void(NitroBiometryType /* result */)>&& func): _function(std::make_shared<std::function<void(NitroBiometryType /* result */)>>(std::move(func))) {}
    inline void call(int result) const {
      _function->operator()(static_cast<NitroBiometryType>(result));
    }
  private:
    std::shared_ptr<std::function<void(NitroBiometryType /* result */)>> _function;
  };
  Func_void_NitroBiometryType create_Func_void_NitroBiometryType(void* _Nonnull swiftClosureWrapper);
  inline Func_void_NitroBiometryType_Wrapper wrap_Func_void_NitroBiometryType(Func_void_NitroBiometryType value) {
    return Func_void_NitroBiometryType_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>`.
   */
  using std__shared_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_ = std::shared_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>;
  std::shared_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec> create_std__shared_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_(std__shared_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>
  using std__weak_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_ = std::weak_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>;
  inline std__weak_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_ weakify_std__shared_ptr_margelo__nitro__nitrobiometrics__HybridNitroBiometricsSpec_(const std::shared_ptr<margelo::nitro::nitrobiometrics::HybridNitroBiometricsSpec>& strong) { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<bool>>>
  using Result_std__shared_ptr_Promise_bool___ = Result<std::shared_ptr<Promise<bool>>>;
  inline Result_std__shared_ptr_Promise_bool___ create_Result_std__shared_ptr_Promise_bool___(const std::shared_ptr<Promise<bool>>& value) {
    return Result<std::shared_ptr<Promise<bool>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_bool___ create_Result_std__shared_ptr_Promise_bool___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<bool>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<NitroBiometryType>>>
  using Result_std__shared_ptr_Promise_NitroBiometryType___ = Result<std::shared_ptr<Promise<NitroBiometryType>>>;
  inline Result_std__shared_ptr_Promise_NitroBiometryType___ create_Result_std__shared_ptr_Promise_NitroBiometryType___(const std::shared_ptr<Promise<NitroBiometryType>>& value) {
    return Result<std::shared_ptr<Promise<NitroBiometryType>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_NitroBiometryType___ create_Result_std__shared_ptr_Promise_NitroBiometryType___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<NitroBiometryType>>>::withError(error);
  }

} // namespace margelo::nitro::nitrobiometrics::bridge::swift
