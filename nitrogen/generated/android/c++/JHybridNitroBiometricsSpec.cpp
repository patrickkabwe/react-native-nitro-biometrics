///
/// JHybridNitroBiometricsSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroBiometricsSpec.hpp"

// Forward declaration of `NitroBiometryType` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { enum class NitroBiometryType; }
// Forward declaration of `NitroBiometricsOptions` to properly resolve imports.
namespace margelo::nitro::nitrobiometrics { struct NitroBiometricsOptions; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "NitroBiometryType.hpp"
#include "JNitroBiometryType.hpp"
#include "NitroBiometricsOptions.hpp"
#include "JNitroBiometricsOptions.hpp"
#include <string>

namespace margelo::nitro::nitrobiometrics {

  jni::local_ref<JHybridNitroBiometricsSpec::jhybriddata> JHybridNitroBiometricsSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroBiometricsSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroBiometricsSpec::initHybrid),
    });
  }

  size_t JHybridNitroBiometricsSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<bool>> JHybridNitroBiometricsSpec::authenticate(const NitroBiometricsOptions& options) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroBiometricsOptions> /* options */)>("authenticate");
    auto __result = method(_javaPart, JNitroBiometricsOptions::fromCpp(options));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridNitroBiometricsSpec::isAvailable() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("isAvailable");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<NitroBiometryType>> JHybridNitroBiometricsSpec::getAvailableBiometryType() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getAvailableBiometryType");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<NitroBiometryType>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroBiometryType>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrobiometrics
